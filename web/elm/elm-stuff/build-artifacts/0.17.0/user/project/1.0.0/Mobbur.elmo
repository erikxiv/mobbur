var _user$project$Mobbur$countdownTimer = function (model) {
	var seconds = A2(_elm_lang$core$Basics$rem, model.countdown, 60);
	var minutes = (model.countdown / 60) | 0;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(minutes),
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								_elm_lang$core$Basics$toString(seconds))))
					]))
			]));
};
var _user$project$Mobbur$initialModel = {countdown: 2, started: false};
var _user$project$Mobbur$init = {ctor: '_Tuple2', _0: _user$project$Mobbur$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Mobbur$alarm = _elm_lang$core$Native_Platform.outgoingPort(
	'alarm',
	function (v) {
		return null;
	});
var _user$project$Mobbur$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Alarm':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{started: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Reset':
				return {ctor: '_Tuple2', _0: _user$project$Mobbur$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Start':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{started: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Pause':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{started: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return (_elm_lang$core$Native_Utils.eq(model.started, true) && (_elm_lang$core$Native_Utils.cmp(model.countdown, 1) < 0)) ? {
					ctor: '_Tuple2',
					_0: _user$project$Mobbur$initialModel,
					_1: _user$project$Mobbur$alarm(
						{ctor: '_Tuple0'})
				} : (_elm_lang$core$Native_Utils.eq(model.started, true) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{countdown: model.countdown - 1}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
		}
	});
var _user$project$Mobbur$Model = F2(
	function (a, b) {
		return {countdown: a, started: b};
	});
var _user$project$Mobbur$Tick = {ctor: 'Tick'};
var _user$project$Mobbur$subscriptions = function (model) {
	return A2(
		_elm_lang$core$Time$every,
		_elm_lang$core$Time$second,
		function (_p1) {
			return _user$project$Mobbur$Tick;
		});
};
var _user$project$Mobbur$Start = {ctor: 'Start'};
var _user$project$Mobbur$startButton = A2(
	_elm_lang$html$Html$button,
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html_Events$onClick(_user$project$Mobbur$Start)
		]),
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html$text('>')
		]));
var _user$project$Mobbur$Pause = {ctor: 'Pause'};
var _user$project$Mobbur$pauseButton = A2(
	_elm_lang$html$Html$button,
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html_Events$onClick(_user$project$Mobbur$Pause)
		]),
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html$text('||')
		]));
var _user$project$Mobbur$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Native_Utils.eq(model.started, true) ? _user$project$Mobbur$pauseButton : _user$project$Mobbur$startButton,
				_user$project$Mobbur$countdownTimer(model)
			]));
};
var _user$project$Mobbur$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Mobbur$init, view: _user$project$Mobbur$view, update: _user$project$Mobbur$update, subscriptions: _user$project$Mobbur$subscriptions})
};
var _user$project$Mobbur$Reset = {ctor: 'Reset'};
var _user$project$Mobbur$Alarm = {ctor: 'Alarm'};
